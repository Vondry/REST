FORMAT: 1A
HOST: http://http://localhost:5000

# REST API for Cinemas IS

> College project which aims to create Information System for Cinemas chain

**Project**: https://gitlab.com/Aisik/iis_best_team

**API specs**: https://github.com/Vondry/REST

## Data Structures

### City (object)
- id: 1 (number, required)
- name: City name (string, required)

### Cinema (object)
- id: 1 (number, required)
- name: Cinema name (string, required)
- street: Cinema street (string, required)
- postcode: 123456 (number, required)
- latitude: 40.71 (number, required)
- longtitude: 74.00 (number, required)  

### Movie (object)
- id: 1 (number, required)
- name: Movie name (string, required)
- role (string, required) - user role e.g. cashier, manager, CEO, admin,...
- times: 1541190611, 1541190611 (array[number], required) - Timestamp in seconds, when movies are beigin projected
- images: cover_image.png, ./another/img.jpg (array[string], required) - Images related to the movie. First image is the cover.
- language: cz (string, required)
- subtitles: en (string, nullable)
- access: 12+ (string, nullable)
- genre: Movie genre (string, required)
- length: 155  (number, required) - Move length in minutes

### Hall (object)
- id: 1 (number, required)
- seats (array[(array[number])], required) - every array in seats display seats row
    - 1, 1, 1, 1, 0, 0  (array[number], required) - Meaning of values: -1-no seat, 0-unavailable, 1-available
    - 1, 1, 1, 1, 0, 0  (array[number], required)

### Seat (object)
- row (number, required)
- column (number, required)

### SeatReservations (object)
- tariffId (number, required)
- count (number, required)

### ReservationBlueprint (object)
- cinemaId (number, required)
- movieId (number, required)
- movieTime (number, required)
- hallId (number, required)
- reservations (array[SeatReservations], required)
- price (number, required)
- seats (array[Seat], required)

### ReservationStatusObject (object)
- id (number, required) - Unique reservation id used to match client's reservation
- status: {success|failure} (string, required)
- errors: Error1, Error2 (array[string], required)

### Tariff (object)
- id (number, required)
- type: Adult (string, required)
- price: 169 (number, required)

### TokenPayload (object)
- id (number, required) - user id
- role (string, required) - user role e.g. cashier, manager, CEO, admin,...
- exp (number, required) - expiration time of token

### TokenResponse (object)
- tokenType: Bearer (string, required) - Authorization: <tokenType> <token>
- acccessToken (string, required) - JWT short-lived token 
- resfreshToken (string, required) - JWT long-lived token

### User (object)
- id (number, required)
- name (string, required)
- surname (string, required)
- email (string, required)

### Reservation (object)
- id (number, required)
- payed (boolean, required) - indicated whether reservation was payed
- user (User) - If user was logged then user is returned, otherwise null
- reservations (array[SeatReservations], required)
- price (number, required)
- created (number, required) - timestamp in ms, when reservation was created
- updated (number, required) - timestamp in ms, when reservation was last edited

# Group Reservation

Data related to reservation system

## Cities Collection [/cities]

### List all cities [GET]

+ Response 200 (application/json)
    
    + Attributes (array[City])
    
## Cinemas Collection [/cinemas]

### List all cinemas [GET]

+ Response 200 (application/json)
    
    + Attributes (array[Cinema])
    
## Cinemas in Cities [/cities/cinemas]

### List all cinemas associated to cities [GET]

+ Response 200 (application/json)

    + Attributes (array)
        - (object)
            - Include City
            - cinemas (array[number])

## List Movies associated to cinema [/cinemas/{id}/movies]

### Movies in cinemas  [GET]

+ Parameter
    - id (number) - Cinema id

+ Response 200 (application/json)
 
    + Attributes (array[Movie])

## Reservation check [/reservation/validate]

- Checks validity of reservation.

### Check reservation validity  [POST]

+ Request (application/json)
    + Attributes
        - Include ReservationBlueprint

+ Response 200 (application/json)
     + Attributes (object)
        - Include ReservationStatusObject
        
+ Response 400 (application/json)
     + Attributes (object)
        - Include ReservationStatusObject

## Reservation [/reservation]

### Make reservation  [POST]

- Validity of reservation needs to be checked also! 
- If everything checks out, then reservation is made.

+ Request (application/json)
    + Attributes
       - Include ReservationBlueprint

+ Response 200 (application/json)
     + Attributes (object)
        - Include ReservationStatusObject
        
+ Response 400 (application/json)
     + Attributes (object)
        - Include ReservationStatusObject

# Group Movies

Data related to movies

## List All Movies [/movies]

### List all Movies  [GET]

+ Response 200 (application/json)
 
    + Attributes (array[Movie])
        
## Movie [/movies/{id}]

### Movie  [GET]

+ Parameter
    - id (number) - Movie id

+ Response 200 (application/json)
    + Attributes 
        - Include Movie
        

# Group Hall

Data related to halls

## Halls collection [/halls]

### List all halls [GET]

+ Response 200 (application/json)
    
    + Attributes (array[Hall])

## Hall related to movie [/halls?cinema={cinemaId}&movie={movieId}&time={time}]

### Movie hall [GET]

+ Parameter
    - cinemaId (number) - Cinema id
    - movieId (number) - Movie id
    - time (number) - Time when movie is played in given Cinema

+ Response 200 (application/json)
 
    + Attributes 
        - Include Hall
        

# Group Tariff

## Get available tariffs [/tariffs]

### Tariffs [GET]
+ Response 200 (application/json)
 
    + Attributes (array[Tariff])
    
# Group Auth

## Authenticate user [/authentication]

### Authenticate [POST]

> **200** - Login has **succeded** and user obtains `TokenResponse`

> **400** - Login has **failed**, due to:
- Missing email or password
- Invalid email or password

As a result, user needs to authenticate again.

+ Request (application/json)
    + Attributes
       - email (string) - user email
       - password (string) - user password

+ Response 200 (application/json)
    + Attributes 
        - Include TokenResponse
        
+ Response 400 (application/json)
    + Attributes 
        - errors (array[string])
    
## Refresh authentication [/authentication/refresh]

### Refresh [POST]

> **200** - Refresh token is sucessfully **verified**. And user receives new `Access token`

> **400** - Refresh token is **malformed**. User needs to log-in again

> **401** - Refresh token may **expired** or does not have other parts valid. User needs to log-in again.

+ Request Headers

        Authorization: <tokenType> <token>

+ Response 200 (application/json)
    + Attributes 
        - accessToken (string) - access token
        
+ Response 400 (application/json)
    + Attributes 
        - errors (array[string])
        
+ Response 401 (application/json)
    + Attributes 
        - errors (array[string])
        
        
# Group CMS

**Content Management System**

> **400** - Access token is **malformed**. User needs to log-in again

> **401** - Access token **expired**. User may try to obtain fresh Access token using Refresh token.

> **403** - Access token **is valid**, but user is **not authorized** to access request data.

## Reservations [/reservations]

### Reservations [GET]
+ Request Headers

        Authorization: <tokenType> <token>
        
+ Response 200 (application/json)
 
    + Attributes (array[Reservations])
    
+ Response 400 (application/json)
    + Attributes 
        - errors (array[string])
        
+ Response 401 (application/json)
    + Attributes 
        - errors (array[string])
        
+ Response 403 (application/json)
    + Attributes 
        - errors (array[string])

### Update reservation [PATCH]

- may include parts or whole reservation. Received reservation should be merged to the old one, which overwrites.

+ Request Headers

        Authorization: <tokenType> <token>

+ Request (application/json)
    + Attributes 
        - Include Reservation
       
+ Response 200 (application/json)
 
    + Attributes (array[Reservations])

+ Response 400 (application/json)
    + Attributes 
        - errors (array[string])
        
+ Response 401 (application/json)
    + Attributes 
        - errors (array[string])
        
+ Response 403 (application/json)
    + Attributes 
        - errors (array[string])